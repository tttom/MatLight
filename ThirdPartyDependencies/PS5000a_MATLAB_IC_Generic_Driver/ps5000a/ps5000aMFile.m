function [methodinfo,structs,enuminfo,ThunkLibName]=ps5000aMFile
%PS5000AMFILE Create structures to define interfaces found in 'ps5000aApi'.

%This function was generated by loadlibrary.m parser version 1.1.6.37 on Tue Oct 22 10:03:17 2013
%perl options:'ps5000aApi.i -outfile=ps5000aMFile.m -thunkfile=ps5000a_thunk_pcwin64.c -header=ps5000aApi.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'ps5000a_thunk_pcwin64');
% PICO_STATUS ps5000aOpenUnit ( short * handle , char * serial , PS5000A_DEVICE_RESOLUTION resolution ); 
fcns.thunkname{fcnNum}='ulongvoidPtrcstringPS5000A_DEVICE_RESOLUTIONThunk';fcns.name{fcnNum}='ps5000aOpenUnit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16Ptr', 'cstring', 'enPS5000ADeviceResolution'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aOpenUnitAsync ( short * status , char * serial , PS5000A_DEVICE_RESOLUTION resolution ); 
fcns.thunkname{fcnNum}='ulongvoidPtrcstringPS5000A_DEVICE_RESOLUTIONThunk';fcns.name{fcnNum}='ps5000aOpenUnitAsync'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16Ptr', 'cstring', 'enPS5000ADeviceResolution'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aOpenUnitProgress ( short * handle , short * progressPercent , short * complete ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ps5000aOpenUnitProgress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16Ptr', 'int16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetUnitInfo ( short handle , char * string , short stringLength , short * requiredSize , PICO_INFO info ); 
fcns.thunkname{fcnNum}='ulongint16cstringint16voidPtrulongThunk';fcns.name{fcnNum}='ps5000aGetUnitInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'cstring', 'int16', 'int16Ptr', 'ulong'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aFlashLed ( short handle , short start ); 
fcns.thunkname{fcnNum}='ulongint16int16Thunk';fcns.name{fcnNum}='ps5000aFlashLed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aIsLedFlashing ( short handle , short * status ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrThunk';fcns.name{fcnNum}='ps5000aIsLedFlashing'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aCloseUnit ( short handle ); 
fcns.thunkname{fcnNum}='ulongint16Thunk';fcns.name{fcnNum}='ps5000aCloseUnit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aMemorySegments ( short handle , unsigned long nSegments , long * nMaxSamples ); 
fcns.thunkname{fcnNum}='ulongint16ulongvoidPtrThunk';fcns.name{fcnNum}='ps5000aMemorySegments'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulong', 'longPtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetChannel ( short handle , PS5000A_CHANNEL channel , short enabled , PS5000A_COUPLING type , PS5000A_RANGE range , float analogOffset ); 
fcns.thunkname{fcnNum}='ulongint16PS5000A_CHANNELint16PS5000A_COUPLINGPS5000A_RANGEfloatThunk';fcns.name{fcnNum}='ps5000aSetChannel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'enPS5000AChannel', 'int16', 'enPS5000ACoupling', 'enPS5000ARange', 'single'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetBandwidthFilter ( short handle , PS5000A_CHANNEL channel , PS5000A_BANDWIDTH_LIMITER bandwidth ); 
fcns.thunkname{fcnNum}='ulongint16PS5000A_CHANNELPS5000A_BANDWIDTH_LIMITERThunk';fcns.name{fcnNum}='ps5000aSetBandwidthFilter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'enPS5000AChannel', 'enPS5000ABandwidthLimiter'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetTimebase ( short handle , unsigned long timebase , long noSamples , long * timeIntervalNanoseconds , long * maxSamples , unsigned long segmentIndex ); 
fcns.thunkname{fcnNum}='ulongint16ulonglongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='ps5000aGetTimebase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulong', 'long', 'longPtr', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetTimebase2 ( short handle , unsigned long timebase , long noSamples , float * timeIntervalNanoseconds , long * maxSamples , unsigned long segmentIndex ); 
fcns.thunkname{fcnNum}='ulongint16ulonglongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='ps5000aGetTimebase2'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulong', 'long', 'singlePtr', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetSigGenArbitrary ( short handle , long offsetVoltage , unsigned long pkToPk , unsigned long startDeltaPhase , unsigned long stopDeltaPhase , unsigned long deltaPhaseIncrement , unsigned long dwellCount , short * arbitraryWaveform , long arbitraryWaveformSize , PS5000A_SWEEP_TYPE sweepType , PS5000A_EXTRA_OPERATIONS operation , PS5000A_INDEX_MODE indexMode , unsigned long shots , unsigned long sweeps , PS5000A_SIGGEN_TRIG_TYPE triggerType , PS5000A_SIGGEN_TRIG_SOURCE triggerSource , short extInThreshold ); 
fcns.thunkname{fcnNum}='ulongint16longulongulongulongulongulongvoidPtrlongPS5000A_SWEEP_TYPEPS5000A_EXTRA_OPERATIONSPS5000A_INDEX_MODEulongulongPS5000A_SIGGEN_TRIG_TYPEPS5000A_SIGGEN_TRIG_SOURCEint16Thunk';fcns.name{fcnNum}='ps5000aSetSigGenArbitrary'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'long', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'int16Ptr', 'long', 'enPS5000ASweepType', 'enPS5000AExtraOperations', 'enPS5000AIndexMode', 'ulong', 'ulong', 'enPS5000ASigGenTrigType', 'enPS5000ASigGenTrigSource', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetSigGenBuiltIn ( short handle , long offsetVoltage , unsigned long pkToPk , PS5000A_WAVE_TYPE waveType , float startFrequency , float stopFrequency , float increment , float dwellTime , PS5000A_SWEEP_TYPE sweepType , PS5000A_EXTRA_OPERATIONS operation , unsigned long shots , unsigned long sweeps , PS5000A_SIGGEN_TRIG_TYPE triggerType , PS5000A_SIGGEN_TRIG_SOURCE triggerSource , short extInThreshold ); 
fcns.thunkname{fcnNum}='ulongint16longulongPS5000A_WAVE_TYPEfloatfloatfloatfloatPS5000A_SWEEP_TYPEPS5000A_EXTRA_OPERATIONSulongulongPS5000A_SIGGEN_TRIG_TYPEPS5000A_SIGGEN_TRIG_SOURCEint16Thunk';fcns.name{fcnNum}='ps5000aSetSigGenBuiltIn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'long', 'ulong', 'enPS5000AWaveType', 'single', 'single', 'single', 'single', 'enPS5000ASweepType', 'enPS5000AExtraOperations', 'ulong', 'ulong', 'enPS5000ASigGenTrigType', 'enPS5000ASigGenTrigSource', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetSigGenPropertiesArbitrary ( short handle , unsigned long startDeltaPhase , unsigned long stopDeltaPhase , unsigned long deltaPhaseIncrement , unsigned long dwellCount , PS5000A_SWEEP_TYPE sweepType , unsigned long shots , unsigned long sweeps , PS5000A_SIGGEN_TRIG_TYPE triggerType , PS5000A_SIGGEN_TRIG_SOURCE triggerSource , short extInThreshold ); 
fcns.thunkname{fcnNum}='ulongint16ulongulongulongulongPS5000A_SWEEP_TYPEulongulongPS5000A_SIGGEN_TRIG_TYPEPS5000A_SIGGEN_TRIG_SOURCEint16Thunk';fcns.name{fcnNum}='ps5000aSetSigGenPropertiesArbitrary'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulong', 'ulong', 'ulong', 'ulong', 'enPS5000ASweepType', 'ulong', 'ulong', 'enPS5000ASigGenTrigType', 'enPS5000ASigGenTrigSource', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetSigGenPropertiesBuiltIn ( short handle , float startFrequency , float stopFrequency , float increment , float dwellTime , PS5000A_SWEEP_TYPE sweepType , unsigned long shots , unsigned long sweeps , PS5000A_SIGGEN_TRIG_TYPE triggerType , PS5000A_SIGGEN_TRIG_SOURCE triggerSource , short extInThreshold ); 
fcns.thunkname{fcnNum}='ulongint16floatfloatfloatfloatPS5000A_SWEEP_TYPEulongulongPS5000A_SIGGEN_TRIG_TYPEPS5000A_SIGGEN_TRIG_SOURCEint16Thunk';fcns.name{fcnNum}='ps5000aSetSigGenPropertiesBuiltIn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'single', 'single', 'single', 'single', 'enPS5000ASweepType', 'ulong', 'ulong', 'enPS5000ASigGenTrigType', 'enPS5000ASigGenTrigSource', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSigGenSoftwareControl ( short handle , short state ); 
fcns.thunkname{fcnNum}='ulongint16int16Thunk';fcns.name{fcnNum}='ps5000aSigGenSoftwareControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetEts ( short handle , PS5000A_ETS_MODE mode , short etsCycles , short etsInterleave , long * sampleTimePicoseconds ); 
fcns.thunkname{fcnNum}='ulongint16PS5000A_ETS_MODEint16int16voidPtrThunk';fcns.name{fcnNum}='ps5000aSetEts'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'enPS5000AEtsMode', 'int16', 'int16', 'longPtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetTriggerChannelProperties ( short handle , PS5000A_TRIGGER_CHANNEL_PROPERTIES * channelProperties , short nChannelProperties , short auxOutputEnable , long autoTriggerMilliseconds ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrint16int16longThunk';fcns.name{fcnNum}='ps5000aSetTriggerChannelProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'tPS5000ATriggerChannelPropertiesPtr', 'int16', 'int16', 'long'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetTriggerChannelConditions ( short handle , PS5000A_TRIGGER_CONDITIONS * conditions , short nConditions ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrint16Thunk';fcns.name{fcnNum}='ps5000aSetTriggerChannelConditions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'tPS5000ATriggerConditionsPtr', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetTriggerChannelDirections ( short handle , PS5000A_THRESHOLD_DIRECTION channelA , PS5000A_THRESHOLD_DIRECTION channelB , PS5000A_THRESHOLD_DIRECTION channelC , PS5000A_THRESHOLD_DIRECTION channelD , PS5000A_THRESHOLD_DIRECTION ext , PS5000A_THRESHOLD_DIRECTION aux ); 
fcns.thunkname{fcnNum}='ulongint16PS5000A_THRESHOLD_DIRECTIONPS5000A_THRESHOLD_DIRECTIONPS5000A_THRESHOLD_DIRECTIONPS5000A_THRESHOLD_DIRECTIONPS5000A_THRESHOLD_DIRECTIONPS5000A_THRESHOLD_DIRECTIONThunk';fcns.name{fcnNum}='ps5000aSetTriggerChannelDirections'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'enPS5000AThresholdDirection', 'enPS5000AThresholdDirection', 'enPS5000AThresholdDirection', 'enPS5000AThresholdDirection', 'enPS5000AThresholdDirection', 'enPS5000AThresholdDirection'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetSimpleTrigger ( short handle , short enable , PS5000A_CHANNEL source , short threshold , PS5000A_THRESHOLD_DIRECTION direction , unsigned long delay , short autoTrigger_ms ); 
fcns.thunkname{fcnNum}='ulongint16int16PS5000A_CHANNELint16PS5000A_THRESHOLD_DIRECTIONulongint16Thunk';fcns.name{fcnNum}='ps5000aSetSimpleTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'int16', 'enPS5000AChannel', 'int16', 'enPS5000AThresholdDirection', 'ulong', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetTriggerDelay ( short handle , unsigned long delay ); 
fcns.thunkname{fcnNum}='ulongint16ulongThunk';fcns.name{fcnNum}='ps5000aSetTriggerDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulong'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetPulseWidthQualifier ( short handle , PS5000A_PWQ_CONDITIONS * conditions , short nConditions , PS5000A_THRESHOLD_DIRECTION direction , unsigned long lower , unsigned long upper , PS5000A_PULSE_WIDTH_TYPE type ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrint16PS5000A_THRESHOLD_DIRECTIONulongulongPS5000A_PULSE_WIDTH_TYPEThunk';fcns.name{fcnNum}='ps5000aSetPulseWidthQualifier'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'tPS5000APwqConditionsPtr', 'int16', 'enPS5000AThresholdDirection', 'ulong', 'ulong', 'enPS5000APulseWidthType'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aIsTriggerOrPulseWidthQualifierEnabled ( short handle , short * triggerEnabled , short * pulseWidthQualifierEnabled ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrvoidPtrThunk';fcns.name{fcnNum}='ps5000aIsTriggerOrPulseWidthQualifierEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'int16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetTriggerTimeOffset ( short handle , unsigned long * timeUpper , unsigned long * timeLower , PS5000A_TIME_UNITS * timeUnits , unsigned long segmentIndex ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='ps5000aGetTriggerTimeOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulongPtr', 'ulongPtr', 'enPS5000ATimeUnitsPtr', 'ulong'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetTriggerTimeOffset64 ( short handle , __int64 * time , PS5000A_TIME_UNITS * timeUnits , unsigned long segmentIndex ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='ps5000aGetTriggerTimeOffset64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'int64Ptr', 'enPS5000ATimeUnitsPtr', 'ulong'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetValuesTriggerTimeOffsetBulk ( short handle , unsigned long * timesUpper , unsigned long * timesLower , PS5000A_TIME_UNITS * timeUnits , unsigned long fromSegmentIndex , unsigned long toSegmentIndex ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrvoidPtrvoidPtrulongulongThunk';fcns.name{fcnNum}='ps5000aGetValuesTriggerTimeOffsetBulk'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulongPtr', 'ulongPtr', 'enPS5000ATimeUnitsPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetValuesTriggerTimeOffsetBulk64 ( short handle , __int64 * times , PS5000A_TIME_UNITS * timeUnits , unsigned long fromSegmentIndex , unsigned long toSegmentIndex ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrvoidPtrulongulongThunk';fcns.name{fcnNum}='ps5000aGetValuesTriggerTimeOffsetBulk64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'int64Ptr', 'enPS5000ATimeUnitsPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetDataBuffers ( short handle , PS5000A_CHANNEL channel , short * bufferMax , short * bufferMin , long bufferLth , unsigned long segmentIndex , PS5000A_RATIO_MODE mode ); 
fcns.thunkname{fcnNum}='ulongint16PS5000A_CHANNELvoidPtrvoidPtrlongulongPS5000A_RATIO_MODEThunk';fcns.name{fcnNum}='ps5000aSetDataBuffers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'enPS5000AChannel', 'int16Ptr', 'int16Ptr', 'long', 'ulong', 'enPS5000ARatioMode'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetDataBuffer ( short handle , PS5000A_CHANNEL channel , short * buffer , long bufferLth , unsigned long segmentIndex , PS5000A_RATIO_MODE mode ); 
fcns.thunkname{fcnNum}='ulongint16PS5000A_CHANNELvoidPtrlongulongPS5000A_RATIO_MODEThunk';fcns.name{fcnNum}='ps5000aSetDataBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'enPS5000AChannel', 'int16Ptr', 'long', 'ulong', 'enPS5000ARatioMode'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetEtsTimeBuffer ( short handle , __int64 * buffer , long bufferLth ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrlongThunk';fcns.name{fcnNum}='ps5000aSetEtsTimeBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'int64Ptr', 'long'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetEtsTimeBuffers ( short handle , unsigned long * timeUpper , unsigned long * timeLower , long bufferLth ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='ps5000aSetEtsTimeBuffers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulongPtr', 'ulongPtr', 'long'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aIsReady ( short handle , short * ready ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrThunk';fcns.name{fcnNum}='ps5000aIsReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aRunBlock ( short handle , long noOfPreTriggerSamples , long noOfPostTriggerSamples , unsigned long timebase , long * timeIndisposedMs , unsigned long segmentIndex , ps5000aBlockReady lpReady , void * pParameter ); 
fcns.thunkname{fcnNum}='ulongint16longlongulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ps5000aRunBlock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'long', 'long', 'ulong', 'longPtr', 'ulong', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aRunStreaming ( short handle , unsigned long * sampleInterval , PS5000A_TIME_UNITS sampleIntervalTimeUnits , unsigned long maxPreTriggerSamples , unsigned long maxPostTriggerSamples , short autoStop , unsigned long downSampleRatio , PS5000A_RATIO_MODE downSampleRatioMode , unsigned long overviewBufferSize ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrPS5000A_TIME_UNITSulongulongint16ulongPS5000A_RATIO_MODEulongThunk';fcns.name{fcnNum}='ps5000aRunStreaming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulongPtr', 'enPS5000ATimeUnits', 'ulong', 'ulong', 'int16', 'ulong', 'enPS5000ARatioMode', 'ulong'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetStreamingLatestValues ( short handle , ps5000aStreamingReady lpPs5000aReady , void * pParameter ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrvoidPtrThunk';fcns.name{fcnNum}='ps5000aGetStreamingLatestValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aNoOfStreamingValues ( short handle , unsigned long * noOfValues ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrThunk';fcns.name{fcnNum}='ps5000aNoOfStreamingValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulongPtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetMaxDownSampleRatio ( short handle , unsigned long noOfUnaggreatedSamples , unsigned long * maxDownSampleRatio , PS5000A_RATIO_MODE downSampleRatioMode , unsigned long segmentIndex ); 
fcns.thunkname{fcnNum}='ulongint16ulongvoidPtrPS5000A_RATIO_MODEulongThunk';fcns.name{fcnNum}='ps5000aGetMaxDownSampleRatio'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulong', 'ulongPtr', 'enPS5000ARatioMode', 'ulong'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetValues ( short handle , unsigned long startIndex , unsigned long * noOfSamples , unsigned long downSampleRatio , PS5000A_RATIO_MODE downSampleRatioMode , unsigned long segmentIndex , short * overflow ); 
fcns.thunkname{fcnNum}='ulongint16ulongvoidPtrulongPS5000A_RATIO_MODEulongvoidPtrThunk';fcns.name{fcnNum}='ps5000aGetValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulong', 'ulongPtr', 'ulong', 'enPS5000ARatioMode', 'ulong', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetValuesAsync ( short handle , unsigned long startIndex , unsigned long noOfSamples , unsigned long downSampleRatio , PS5000A_RATIO_MODE downSampleRatioMode , unsigned long segmentIndex , void * lpDataReady , void * pParameter ); 
fcns.thunkname{fcnNum}='ulongint16ulongulongulongPS5000A_RATIO_MODEulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ps5000aGetValuesAsync'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulong', 'ulong', 'ulong', 'enPS5000ARatioMode', 'ulong', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetValuesBulk ( short handle , unsigned long * noOfSamples , unsigned long fromSegmentIndex , unsigned long toSegmentIndex , unsigned long downSampleRatio , PS5000A_RATIO_MODE downSampleRatioMode , short * overflow ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrulongulongulongPS5000A_RATIO_MODEvoidPtrThunk';fcns.name{fcnNum}='ps5000aGetValuesBulk'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulongPtr', 'ulong', 'ulong', 'ulong', 'enPS5000ARatioMode', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetValuesOverlapped ( short handle , unsigned long startIndex , unsigned long * noOfSamples , unsigned long downSampleRatio , PS5000A_RATIO_MODE downSampleRatioMode , unsigned long segmentIndex , short * overflow ); 
fcns.thunkname{fcnNum}='ulongint16ulongvoidPtrulongPS5000A_RATIO_MODEulongvoidPtrThunk';fcns.name{fcnNum}='ps5000aGetValuesOverlapped'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulong', 'ulongPtr', 'ulong', 'enPS5000ARatioMode', 'ulong', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetValuesOverlappedBulk ( short handle , unsigned long startIndex , unsigned long * noOfSamples , unsigned long downSampleRatio , PS5000A_RATIO_MODE downSampleRatioMode , unsigned long fromSegmentIndex , unsigned long toSegmentIndex , short * overflow ); 
fcns.thunkname{fcnNum}='ulongint16ulongvoidPtrulongPS5000A_RATIO_MODEulongulongvoidPtrThunk';fcns.name{fcnNum}='ps5000aGetValuesOverlappedBulk'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulong', 'ulongPtr', 'ulong', 'enPS5000ARatioMode', 'ulong', 'ulong', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aTriggerWithinPreTriggerSamples ( short handle , PS5000A_TRIGGER_WITHIN_PRE_TRIGGER state ); 
fcns.thunkname{fcnNum}='ulongint16PS5000A_TRIGGER_WITHIN_PRE_TRIGGERThunk';fcns.name{fcnNum}='ps5000aTriggerWithinPreTriggerSamples'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'enPS5000ATriggerWithinPreTrigger'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetTriggerInfoBulk ( short handle , PS5000A_TRIGGER_INFO * triggerInfo , unsigned long fromSegmentIndex , unsigned long toSegmentIndex ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrulongulongThunk';fcns.name{fcnNum}='ps5000aGetTriggerInfoBulk'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'tPS5000ATriggerInfoPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aEnumerateUnits ( short * count , char * serials , short * serialLth ); 
fcns.thunkname{fcnNum}='ulongvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='ps5000aEnumerateUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16Ptr', 'cstring', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetChannelInformation ( short handle , PS5000A_CHANNEL_INFO info , int probe , int * ranges , int * length , int channels ); 
fcns.thunkname{fcnNum}='ulongint16PS5000A_CHANNEL_INFOint32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ps5000aGetChannelInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'enPS5000AChannelInfo', 'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aMaximumValue ( short handle , short * value ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrThunk';fcns.name{fcnNum}='ps5000aMaximumValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aMinimumValue ( short handle , short * value ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrThunk';fcns.name{fcnNum}='ps5000aMinimumValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetAnalogueOffset ( short handle , PS5000A_RANGE range , PS5000A_COUPLING coupling , float * maximumVoltage , float * minimumVoltage ); 
fcns.thunkname{fcnNum}='ulongint16PS5000A_RANGEPS5000A_COUPLINGvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ps5000aGetAnalogueOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'enPS5000ARange', 'enPS5000ACoupling', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetMaxSegments ( short handle , unsigned long * maxSegments ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrThunk';fcns.name{fcnNum}='ps5000aGetMaxSegments'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulongPtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aChangePowerSource ( short handle , PICO_STATUS powerState ); 
fcns.thunkname{fcnNum}='ulongint16ulongThunk';fcns.name{fcnNum}='ps5000aChangePowerSource'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulong'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aCurrentPowerSource ( short handle ); 
fcns.thunkname{fcnNum}='ulongint16Thunk';fcns.name{fcnNum}='ps5000aCurrentPowerSource'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aStop ( short handle ); 
fcns.thunkname{fcnNum}='ulongint16Thunk';fcns.name{fcnNum}='ps5000aStop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aPingUnit ( short handle ); 
fcns.thunkname{fcnNum}='ulongint16Thunk';fcns.name{fcnNum}='ps5000aPingUnit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetNoOfCaptures ( short handle , unsigned long nCaptures ); 
fcns.thunkname{fcnNum}='ulongint16ulongThunk';fcns.name{fcnNum}='ps5000aSetNoOfCaptures'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulong'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetNoOfCaptures ( short handle , unsigned long * nCaptures ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrThunk';fcns.name{fcnNum}='ps5000aGetNoOfCaptures'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulongPtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetNoOfProcessedCaptures ( short handle , unsigned long * nProcessedCaptures ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrThunk';fcns.name{fcnNum}='ps5000aGetNoOfProcessedCaptures'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'ulongPtr'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aSetDeviceResolution ( short handle , PS5000A_DEVICE_RESOLUTION resolution ); 
fcns.thunkname{fcnNum}='ulongint16PS5000A_DEVICE_RESOLUTIONThunk';fcns.name{fcnNum}='ps5000aSetDeviceResolution'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'enPS5000ADeviceResolution'};fcnNum=fcnNum+1;
% PICO_STATUS ps5000aGetDeviceResolution ( short handle , PS5000A_DEVICE_RESOLUTION * resolution ); 
fcns.thunkname{fcnNum}='ulongint16voidPtrThunk';fcns.name{fcnNum}='ps5000aGetDeviceResolution'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int16', 'enPS5000ADeviceResolutionPtr'};fcnNum=fcnNum+1;
structs.tPS5000ATriggerInfo.packing=1;
structs.tPS5000ATriggerInfo.members=struct('status', 'ulong', 'segmentIndex', 'ulong', 'triggerIndex', 'ulong', 'triggerTime', 'int64', 'timeUnits', 'int16', 'reserved', 'int16');
structs.tPS5000ATriggerConditions.packing=1;
structs.tPS5000ATriggerConditions.members=struct('channelA', 'enPS5000ATriggerState', 'channelB', 'enPS5000ATriggerState', 'channelC', 'enPS5000ATriggerState', 'channelD', 'enPS5000ATriggerState', 'external', 'enPS5000ATriggerState', 'aux', 'enPS5000ATriggerState', 'pulseWidthQualifier', 'enPS5000ATriggerState');
structs.tPS5000APwqConditions.packing=1;
structs.tPS5000APwqConditions.members=struct('channelA', 'enPS5000ATriggerState', 'channelB', 'enPS5000ATriggerState', 'channelC', 'enPS5000ATriggerState', 'channelD', 'enPS5000ATriggerState', 'external', 'enPS5000ATriggerState', 'aux', 'enPS5000ATriggerState');
structs.tPS5000ATriggerChannelProperties.packing=1;
structs.tPS5000ATriggerChannelProperties.members=struct('thresholdUpper', 'int16', 'thresholdUpperHysteresis', 'uint16', 'thresholdLower', 'int16', 'thresholdLowerHysteresis', 'uint16', 'channel', 'enPS5000AChannel', 'thresholdMode', 'enPS5000AThresholdMode');
enuminfo.enPS5000ARatioMode=struct('PS5000A_RATIO_MODE_NONE',0,'PS5000A_RATIO_MODE_AGGREGATE',1,'PS5000A_RATIO_MODE_DECIMATE',2,'PS5000A_RATIO_MODE_AVERAGE',4,'PS5000A_RATIO_MODE_DISTRIBUTION',8);
enuminfo.enPS5000AThresholdDirection=struct('PS5000A_ABOVE',0,'PS5000A_BELOW',1,'PS5000A_RISING',2,'PS5000A_FALLING',3,'PS5000A_RISING_OR_FALLING',4,'PS5000A_ABOVE_LOWER',5,'PS5000A_BELOW_LOWER',6,'PS5000A_RISING_LOWER',7,'PS5000A_FALLING_LOWER',8,'PS5000A_INSIDE',0,'PS5000A_OUTSIDE',1,'PS5000A_ENTER',2,'PS5000A_EXIT',3,'PS5000A_ENTER_OR_EXIT',4,'PS5000A_POSITIVE_RUNT',9,'PS5000A_NEGATIVE_RUNT',10,'PS5000A_NONE',2);
enuminfo.enPS5000AChannelInfo=struct('PS5000A_CI_RANGES',0);
enuminfo.enPS5000AThresholdMode=struct('PS5000A_LEVEL',0,'PS5000A_WINDOW',1);
enuminfo.enPS5000APulseWidthType=struct('PS5000A_PW_TYPE_NONE',0,'PS5000A_PW_TYPE_LESS_THAN',1,'PS5000A_PW_TYPE_GREATER_THAN',2,'PS5000A_PW_TYPE_IN_RANGE',3,'PS5000A_PW_TYPE_OUT_OF_RANGE',4);
enuminfo.enPS5000AChannelBufferIndex=struct('PS5000A_CHANNEL_A_MAX',0,'PS5000A_CHANNEL_A_MIN',1,'PS5000A_CHANNEL_B_MAX',2,'PS5000A_CHANNEL_B_MIN',3,'PS5000A_CHANNEL_C_MAX',4,'PS5000A_CHANNEL_C_MIN',5,'PS5000A_CHANNEL_D_MAX',6,'PS5000A_CHANNEL_D_MIN',7,'PS5000A_MAX_CHANNEL_BUFFERS',8);
enuminfo.enPS5000ATriggerWithinPreTrigger=struct('PS5000A_DISABLE',0,'PS5000A_ARM',1);
enuminfo.enPS5000ACoupling=struct('PS5000A_AC',0,'PS5000A_DC',1);
enuminfo.enPS5000AEtsMode=struct('PS5000A_ETS_OFF',0,'PS5000A_ETS_FAST',1,'PS5000A_ETS_SLOW',2,'PS5000A_ETS_MODES_MAX',3);
enuminfo.enPS5000ASweepType=struct('PS5000A_UP',0,'PS5000A_DOWN',1,'PS5000A_UPDOWN',2,'PS5000A_DOWNUP',3,'PS5000A_MAX_SWEEP_TYPES',4);
enuminfo.enPS5000ASigGenTrigType=struct('PS5000A_SIGGEN_RISING',0,'PS5000A_SIGGEN_FALLING',1,'PS5000A_SIGGEN_GATE_HIGH',2,'PS5000A_SIGGEN_GATE_LOW',3);
enuminfo.enPS5000ADeviceResolution=struct('PS5000A_DR_8BIT',0,'PS5000A_DR_12BIT',1,'PS5000A_DR_14BIT',2,'PS5000A_DR_15BIT',3,'PS5000A_DR_16BIT',4);
enuminfo.enPS5000AIndexMode=struct('PS5000A_SINGLE',0,'PS5000A_DUAL',1,'PS5000A_QUAD',2,'PS5000A_MAX_INDEX_MODES',3);
enuminfo.enPS5000AWaveType=struct('PS5000A_SINE',0,'PS5000A_SQUARE',1,'PS5000A_TRIANGLE',2,'PS5000A_RAMP_UP',3,'PS5000A_RAMP_DOWN',4,'PS5000A_SINC',5,'PS5000A_GAUSSIAN',6,'PS5000A_HALF_SINE',7,'PS5000A_DC_VOLTAGE',8,'PS5000A_WHITE_NOISE',9,'PS5000A_MAX_WAVE_TYPES',10);
enuminfo.enPS5000ABandwidthLimiter=struct('PS5000A_BW_FULL',0,'PS5000A_BW_20MHZ',1);
enuminfo.enPS5000ASigGenTrigSource=struct('PS5000A_SIGGEN_NONE',0,'PS5000A_SIGGEN_SCOPE_TRIG',1,'PS5000A_SIGGEN_AUX_IN',2,'PS5000A_SIGGEN_EXT_IN',3,'PS5000A_SIGGEN_SOFT_TRIG',4);
enuminfo.enPS5000AChannel=struct('PS5000A_CHANNEL_A',0,'PS5000A_CHANNEL_B',1,'PS5000A_CHANNEL_C',2,'PS5000A_CHANNEL_D',3,'PS5000A_EXTERNAL',4,'PS5000A_MAX_CHANNELS',4,'PS5000A_TRIGGER_AUX',5,'PS5000A_MAX_TRIGGER_SOURCES',6);
enuminfo.enPS5000AExtraOperations=struct('PS5000A_ES_OFF',0,'PS5000A_WHITENOISE',1,'PS5000A_PRBS',2);
enuminfo.enPS5000ATriggerState=struct('PS5000A_CONDITION_DONT_CARE',0,'PS5000A_CONDITION_TRUE',1,'PS5000A_CONDITION_FALSE',2,'PS5000A_CONDITION_MAX',3);
enuminfo.enPS5000ARange=struct('PS5000A_10MV',0,'PS5000A_20MV',1,'PS5000A_50MV',2,'PS5000A_100MV',3,'PS5000A_200MV',4,'PS5000A_500MV',5,'PS5000A_1V',6,'PS5000A_2V',7,'PS5000A_5V',8,'PS5000A_10V',9,'PS5000A_20V',10,'PS5000A_50V',11,'PS5000A_MAX_RANGES',12);
enuminfo.enPS5000ATimeUnits=struct('PS5000A_FS',0,'PS5000A_PS',1,'PS5000A_NS',2,'PS5000A_US',3,'PS5000A_MS',4,'PS5000A_S',5,'PS5000A_MAX_TIME_UNITS',6);
methodinfo=fcns;